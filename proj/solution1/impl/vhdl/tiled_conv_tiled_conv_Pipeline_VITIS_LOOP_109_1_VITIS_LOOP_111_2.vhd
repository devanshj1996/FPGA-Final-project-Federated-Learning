-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_109_1_VITIS_LOOP_111_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_wt_AWVALID : OUT STD_LOGIC;
    m_axi_wt_AWREADY : IN STD_LOGIC;
    m_axi_wt_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WVALID : OUT STD_LOGIC;
    m_axi_wt_WREADY : IN STD_LOGIC;
    m_axi_wt_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_WLAST : OUT STD_LOGIC;
    m_axi_wt_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARVALID : OUT STD_LOGIC;
    m_axi_wt_ARREADY : IN STD_LOGIC;
    m_axi_wt_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RVALID : IN STD_LOGIC;
    m_axi_wt_RREADY : OUT STD_LOGIC;
    m_axi_wt_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_RLAST : IN STD_LOGIC;
    m_axi_wt_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_wt_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BVALID : IN STD_LOGIC;
    m_axi_wt_BREADY : OUT STD_LOGIC;
    m_axi_wt_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln109 : IN STD_LOGIC_VECTOR (62 downto 0);
    linear_weights : IN STD_LOGIC_VECTOR (63 downto 0);
    linear_input_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    linear_input_V_ce0 : OUT STD_LOGIC;
    linear_input_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_109_1_VITIS_LOOP_111_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_5A0 : STD_LOGIC_VECTOR (10 downto 0) := "10110100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln109_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal icmp_ln109_reg_428_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ifzero_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln109_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal wt_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal wt_blk_n_R : STD_LOGIC;
    signal fm_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln109_reg_428_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln109_reg_428_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_432_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln109_fu_220_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_reg_437_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln109_1_fu_228_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln109_1_reg_444 : STD_LOGIC_VECTOR (3 downto 0);
    signal ifzero_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_449_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal wt_addr_reg_453 : STD_LOGIC_VECTOR (63 downto 0);
    signal wt_addr_read_reg_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_V_reg_489 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter13_stage0 : STD_LOGIC;
    signal j_cast13_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1319_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lhs_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_lhs_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln111_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten55_fu_114 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln109_2_fu_196_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten55_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln109_fu_208_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1319_mid2_v_v_fu_263_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln109_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1319_2_fu_286_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1319_fu_293_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1319_1_fu_279_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1319_fu_297_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1319_1_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln109_1_fu_274_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1319_1_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_313_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln109_2_fu_347_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_V_fu_367_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_381_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_381_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_381_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mac_muladd_16s_15ns_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_16s_15ns_29ns_29_4_1_U76 : component tiled_conv_mac_muladd_16s_15ns_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => wt_addr_read_reg_464,
        din1 => grp_fu_381_p1,
        din2 => grp_fu_381_p2,
        ce => grp_fu_381_ce,
        dout => grp_fu_381_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter13_stage0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln109_fu_190_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_110 <= select_ln109_1_fu_228_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_110 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten55_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln109_fu_190_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten55_fu_114 <= add_ln109_2_fu_196_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten55_fu_114 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln109_fu_190_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_106 <= add_ln111_fu_236_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_106 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lhs_fu_102 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln109_reg_428_pp0_iter12_reg = ap_const_lv1_0))) then 
                    lhs_fu_102 <= temp_V_fu_367_p1(28 downto 13);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln109_reg_428_pp0_iter10_reg <= icmp_ln109_reg_428_pp0_iter9_reg;
                icmp_ln109_reg_428_pp0_iter11_reg <= icmp_ln109_reg_428_pp0_iter10_reg;
                icmp_ln109_reg_428_pp0_iter12_reg <= icmp_ln109_reg_428_pp0_iter11_reg;
                icmp_ln109_reg_428_pp0_iter2_reg <= icmp_ln109_reg_428_pp0_iter1_reg;
                icmp_ln109_reg_428_pp0_iter3_reg <= icmp_ln109_reg_428_pp0_iter2_reg;
                icmp_ln109_reg_428_pp0_iter4_reg <= icmp_ln109_reg_428_pp0_iter3_reg;
                icmp_ln109_reg_428_pp0_iter5_reg <= icmp_ln109_reg_428_pp0_iter4_reg;
                icmp_ln109_reg_428_pp0_iter6_reg <= icmp_ln109_reg_428_pp0_iter5_reg;
                icmp_ln109_reg_428_pp0_iter7_reg <= icmp_ln109_reg_428_pp0_iter6_reg;
                icmp_ln109_reg_428_pp0_iter8_reg <= icmp_ln109_reg_428_pp0_iter7_reg;
                icmp_ln109_reg_428_pp0_iter9_reg <= icmp_ln109_reg_428_pp0_iter8_reg;
                icmp_ln111_reg_432_pp0_iter10_reg <= icmp_ln111_reg_432_pp0_iter9_reg;
                icmp_ln111_reg_432_pp0_iter11_reg <= icmp_ln111_reg_432_pp0_iter10_reg;
                icmp_ln111_reg_432_pp0_iter2_reg <= icmp_ln111_reg_432_pp0_iter1_reg;
                icmp_ln111_reg_432_pp0_iter3_reg <= icmp_ln111_reg_432_pp0_iter2_reg;
                icmp_ln111_reg_432_pp0_iter4_reg <= icmp_ln111_reg_432_pp0_iter3_reg;
                icmp_ln111_reg_432_pp0_iter5_reg <= icmp_ln111_reg_432_pp0_iter4_reg;
                icmp_ln111_reg_432_pp0_iter6_reg <= icmp_ln111_reg_432_pp0_iter5_reg;
                icmp_ln111_reg_432_pp0_iter7_reg <= icmp_ln111_reg_432_pp0_iter6_reg;
                icmp_ln111_reg_432_pp0_iter8_reg <= icmp_ln111_reg_432_pp0_iter7_reg;
                icmp_ln111_reg_432_pp0_iter9_reg <= icmp_ln111_reg_432_pp0_iter8_reg;
                ifzero_reg_449_pp0_iter10_reg <= ifzero_reg_449_pp0_iter9_reg;
                ifzero_reg_449_pp0_iter11_reg <= ifzero_reg_449_pp0_iter10_reg;
                ifzero_reg_449_pp0_iter12_reg <= ifzero_reg_449_pp0_iter11_reg;
                ifzero_reg_449_pp0_iter13_reg <= ifzero_reg_449_pp0_iter12_reg;
                ifzero_reg_449_pp0_iter2_reg <= ifzero_reg_449_pp0_iter1_reg;
                ifzero_reg_449_pp0_iter3_reg <= ifzero_reg_449_pp0_iter2_reg;
                ifzero_reg_449_pp0_iter4_reg <= ifzero_reg_449_pp0_iter3_reg;
                ifzero_reg_449_pp0_iter5_reg <= ifzero_reg_449_pp0_iter4_reg;
                ifzero_reg_449_pp0_iter6_reg <= ifzero_reg_449_pp0_iter5_reg;
                ifzero_reg_449_pp0_iter7_reg <= ifzero_reg_449_pp0_iter6_reg;
                ifzero_reg_449_pp0_iter8_reg <= ifzero_reg_449_pp0_iter7_reg;
                ifzero_reg_449_pp0_iter9_reg <= ifzero_reg_449_pp0_iter8_reg;
                select_ln109_reg_437_pp0_iter2_reg <= select_ln109_reg_437_pp0_iter1_reg;
                select_ln109_reg_437_pp0_iter3_reg <= select_ln109_reg_437_pp0_iter2_reg;
                select_ln109_reg_437_pp0_iter4_reg <= select_ln109_reg_437_pp0_iter3_reg;
                select_ln109_reg_437_pp0_iter5_reg <= select_ln109_reg_437_pp0_iter4_reg;
                select_ln109_reg_437_pp0_iter6_reg <= select_ln109_reg_437_pp0_iter5_reg;
                select_ln109_reg_437_pp0_iter7_reg <= select_ln109_reg_437_pp0_iter6_reg;
                select_ln109_reg_437_pp0_iter8_reg <= select_ln109_reg_437_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln109_reg_428 <= icmp_ln109_fu_190_p2;
                icmp_ln109_reg_428_pp0_iter1_reg <= icmp_ln109_reg_428;
                icmp_ln111_reg_432_pp0_iter1_reg <= icmp_ln111_reg_432;
                ifzero_reg_449_pp0_iter1_reg <= ifzero_reg_449;
                select_ln109_reg_437_pp0_iter1_reg <= select_ln109_reg_437;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_fu_190_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln111_reg_432 <= icmp_ln111_fu_214_p2;
                ifzero_reg_449 <= ifzero_fu_242_p2;
                select_ln109_1_reg_444 <= select_ln109_1_fu_228_p3;
                select_ln109_reg_437 <= select_ln109_fu_220_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln109_reg_428_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                temp_V_reg_489 <= temp_V_fu_367_p1(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0))) then
                wt_addr_read_reg_464 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln109_reg_428 = ap_const_lv1_0))) then
                wt_addr_reg_453 <= sext_ln1319_fu_323_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln109_1_fu_274_p2 <= std_logic_vector(unsigned(zext_ln109_fu_270_p1) + unsigned(linear_weights));
    add_ln109_2_fu_196_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten55_load) + unsigned(ap_const_lv11_1));
    add_ln109_fu_208_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln111_fu_236_p2 <= std_logic_vector(unsigned(select_ln109_fu_220_p3) + unsigned(ap_const_lv8_1));
    add_ln1319_1_fu_307_p2 <= std_logic_vector(unsigned(zext_ln1319_1_fu_303_p1) + unsigned(add_ln109_1_fu_274_p2));
    add_ln1319_fu_297_p2 <= std_logic_vector(unsigned(zext_ln1319_fu_293_p1) + unsigned(shl_ln1319_1_fu_279_p3));
    add_ln1319_mid2_v_v_fu_263_p3 <= (select_ln109_1_reg_444 & ap_const_lv1_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_wt_RVALID, icmp_ln109_reg_428_pp0_iter8_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, m_axi_wt_RVALID, ap_block_state3_io, icmp_ln109_reg_428_pp0_iter8_reg, ap_block_state15_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, m_axi_wt_RVALID, ap_block_state3_io, icmp_ln109_reg_428_pp0_iter8_reg, ap_block_state15_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_wt_RVALID, icmp_ln109_reg_428_pp0_iter8_reg)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(m_axi_fm_WREADY, ifzero_reg_449_pp0_iter13_reg)
    begin
                ap_block_state15_io <= ((ifzero_reg_449_pp0_iter13_reg = ap_const_lv1_1) and (m_axi_fm_WREADY = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_wt_ARREADY, icmp_ln109_reg_428_pp0_iter1_reg)
    begin
                ap_block_state3_io <= ((m_axi_wt_ARREADY = ap_const_logic_0) and (icmp_ln109_reg_428_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln109_fu_190_p2)
    begin
        if (((icmp_ln109_fu_190_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter13_stage0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_subdone, icmp_ln109_reg_428_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln109_reg_428_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter13_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter13_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter13_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_110)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten55_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten55_fu_114)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten55_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten55_load <= indvar_flatten55_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_106)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0, icmp_ln109_reg_428_pp0_iter12_reg, lhs_fu_102, temp_V_fu_367_p1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln109_reg_428_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_lhs_load <= temp_V_fu_367_p1(28 downto 13);
        else 
            ap_sig_allocacmp_lhs_load <= lhs_fu_102;
        end if; 
    end process;


    fm_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_fm_WREADY, ifzero_reg_449_pp0_iter13_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ifzero_reg_449_pp0_iter13_reg = ap_const_lv1_1))) then 
            fm_blk_n_W <= m_axi_fm_WREADY;
        else 
            fm_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_381_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_381_ce <= ap_const_logic_1;
        else 
            grp_fu_381_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_381_p1 <= grp_fu_381_p10(15 - 1 downto 0);
    grp_fu_381_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(linear_input_V_q0),29));
    grp_fu_381_p2 <= (select_ln109_2_fu_347_p3 & ap_const_lv13_0);
    icmp_ln109_fu_190_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten55_load = ap_const_lv11_5A0) else "0";
    icmp_ln111_fu_214_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_90) else "0";
    ifzero_fu_242_p2 <= "1" when (add_ln111_fu_236_p2 = ap_const_lv8_90) else "0";
    j_cast13_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_reg_437_pp0_iter8_reg),64));
    linear_input_V_address0 <= j_cast13_fu_333_p1(8 - 1 downto 0);

    linear_input_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            linear_input_V_ce0 <= ap_const_logic_1;
        else 
            linear_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_ARADDR <= ap_const_lv64_0;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_0;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;
    m_axi_fm_ARVALID <= ap_const_logic_0;
    m_axi_fm_AWADDR <= ap_const_lv64_0;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_0;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;
    m_axi_fm_AWVALID <= ap_const_logic_0;
    m_axi_fm_BREADY <= ap_const_logic_0;
    m_axi_fm_RREADY <= ap_const_logic_0;
    m_axi_fm_WDATA <= temp_V_reg_489;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_3;
    m_axi_fm_WUSER <= ap_const_lv1_0;

    m_axi_fm_WVALID_assign_proc : process(ap_enable_reg_pp0_iter14, ifzero_reg_449_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ifzero_reg_449_pp0_iter13_reg = ap_const_lv1_1))) then 
            m_axi_fm_WVALID <= ap_const_logic_1;
        else 
            m_axi_fm_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_ARADDR <= wt_addr_reg_453;
    m_axi_wt_ARBURST <= ap_const_lv2_0;
    m_axi_wt_ARCACHE <= ap_const_lv4_0;
    m_axi_wt_ARID <= ap_const_lv1_0;
    m_axi_wt_ARLEN <= ap_const_lv32_1;
    m_axi_wt_ARLOCK <= ap_const_lv2_0;
    m_axi_wt_ARPROT <= ap_const_lv3_0;
    m_axi_wt_ARQOS <= ap_const_lv4_0;
    m_axi_wt_ARREGION <= ap_const_lv4_0;
    m_axi_wt_ARSIZE <= ap_const_lv3_0;
    m_axi_wt_ARUSER <= ap_const_lv1_0;

    m_axi_wt_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln109_reg_428_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln109_reg_428_pp0_iter1_reg = ap_const_lv1_0))) then 
            m_axi_wt_ARVALID <= ap_const_logic_1;
        else 
            m_axi_wt_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_AWADDR <= ap_const_lv64_0;
    m_axi_wt_AWBURST <= ap_const_lv2_0;
    m_axi_wt_AWCACHE <= ap_const_lv4_0;
    m_axi_wt_AWID <= ap_const_lv1_0;
    m_axi_wt_AWLEN <= ap_const_lv32_0;
    m_axi_wt_AWLOCK <= ap_const_lv2_0;
    m_axi_wt_AWPROT <= ap_const_lv3_0;
    m_axi_wt_AWQOS <= ap_const_lv4_0;
    m_axi_wt_AWREGION <= ap_const_lv4_0;
    m_axi_wt_AWSIZE <= ap_const_lv3_0;
    m_axi_wt_AWUSER <= ap_const_lv1_0;
    m_axi_wt_AWVALID <= ap_const_logic_0;
    m_axi_wt_BREADY <= ap_const_logic_0;

    m_axi_wt_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln109_reg_428_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0))) then 
            m_axi_wt_RREADY <= ap_const_logic_1;
        else 
            m_axi_wt_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_WDATA <= ap_const_lv16_0;
    m_axi_wt_WID <= ap_const_lv1_0;
    m_axi_wt_WLAST <= ap_const_logic_0;
    m_axi_wt_WSTRB <= ap_const_lv2_0;
    m_axi_wt_WUSER <= ap_const_lv1_0;
    m_axi_wt_WVALID <= ap_const_logic_0;
    select_ln109_1_fu_228_p3 <= 
        add_ln109_fu_208_p2 when (icmp_ln111_fu_214_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln109_2_fu_347_p3 <= 
        ap_const_lv16_0 when (icmp_ln111_reg_432_pp0_iter11_reg(0) = '1') else 
        ap_sig_allocacmp_lhs_load;
    select_ln109_fu_220_p3 <= 
        ap_const_lv8_0 when (icmp_ln111_fu_214_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln1319_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_313_p4),64));

    shl_ln1319_1_fu_279_p3 <= (select_ln109_reg_437 & ap_const_lv4_0);
    shl_ln1319_2_fu_286_p3 <= (select_ln109_reg_437 & ap_const_lv2_0);
    temp_V_fu_367_p1 <= grp_fu_381_p3;
    trunc_ln3_fu_313_p4 <= add_ln1319_1_fu_307_p2(63 downto 1);

    wt_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_wt_ARREADY, icmp_ln109_reg_428_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln109_reg_428_pp0_iter1_reg = ap_const_lv1_0))) then 
            wt_blk_n_AR <= m_axi_wt_ARREADY;
        else 
            wt_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    wt_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_wt_RVALID, icmp_ln109_reg_428_pp0_iter8_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln109_reg_428_pp0_iter8_reg = ap_const_lv1_0))) then 
            wt_blk_n_R <= m_axi_wt_RVALID;
        else 
            wt_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln109_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_mid2_v_v_fu_263_p3),64));
    zext_ln1319_1_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_fu_297_p2),64));
    zext_ln1319_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1319_2_fu_286_p3),12));
end behav;
