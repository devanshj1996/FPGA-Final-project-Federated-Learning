-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_94_2_VITIS_LOOP_96_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (4 downto 0);
    layer1_output_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    layer1_output_V_ce0 : OUT STD_LOGIC;
    layer1_output_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    linear_input_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    linear_input_V_ce0 : OUT STD_LOGIC;
    linear_input_V_we0 : OUT STD_LOGIC;
    linear_input_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_94_2_VITIS_LOOP_96_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln94_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln97_fu_235_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln97_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln97_2_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln97_2_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln97_fu_291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln97_reg_372 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln97_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln97_3_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln97_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tj_fu_52 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln96_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_tj_load : STD_LOGIC_VECTOR (3 downto 0);
    signal tp_fu_56 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln94_3_fu_279_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_tp_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten48_fu_60 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln94_1_fu_164_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten48_load : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln94_fu_118_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_fu_122_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_32_fu_128_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_fu_140_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_fu_132_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_cast_fu_148_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln96_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln94_fu_173_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln94_1_fu_193_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln95_1_fu_197_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln94_1_fu_203_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln97_fu_211_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_223_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_215_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln97_1_fu_231_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_241_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl12_mid1_fu_253_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl11_mid1_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_cast_mid1_fu_261_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid146_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_33_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln94_fu_185_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln94_2_fu_271_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln97_1_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln97_2_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln94_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten48_fu_60 <= add_ln94_1_fu_164_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten48_fu_60 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    tj_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln94_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    tj_fu_52 <= add_ln96_fu_297_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    tj_fu_52 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    tp_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln94_fu_158_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    tp_fu_56 <= select_ln94_3_fu_279_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    tp_fu_56 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_158_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln97_reg_372 <= add_ln97_fu_291_p2;
                    sub_ln97_reg_362(7 downto 2) <= sub_ln97_fu_235_p2(7 downto 2);
                    zext_ln97_2_reg_367(3 downto 0) <= zext_ln97_2_fu_287_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln97_reg_372_pp0_iter1_reg <= add_ln97_reg_372;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    sub_ln97_reg_362(1 downto 0) <= "00";
    zext_ln97_2_reg_367(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln94_1_fu_164_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten48_load) + unsigned(ap_const_lv6_1));
    add_ln94_fu_173_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_tp_1) + unsigned(ap_const_lv2_1));
    add_ln95_1_fu_197_p2 <= std_logic_vector(unsigned(zext_ln94_1_fu_193_p1) + unsigned(empty));
    add_ln95_fu_122_p2 <= std_logic_vector(unsigned(zext_ln94_fu_118_p1) + unsigned(empty));
    add_ln96_fu_297_p2 <= std_logic_vector(unsigned(select_ln94_fu_185_p3) + unsigned(ap_const_lv4_1));
    add_ln97_1_fu_318_p2 <= std_logic_vector(unsigned(sub_ln97_reg_362) + unsigned(ap_const_lv8_90));
    add_ln97_2_fu_323_p2 <= std_logic_vector(unsigned(add_ln97_1_fu_318_p2) + unsigned(zext_ln97_2_reg_367));
    add_ln97_fu_291_p2 <= std_logic_vector(unsigned(zext_ln97_2_fu_287_p1) + unsigned(select_ln94_2_fu_271_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln94_fu_158_p2)
    begin
        if (((icmp_ln94_fu_158_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten48_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten48_fu_60)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten48_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten48_load <= indvar_flatten48_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_tj_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tj_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_tj_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_tj_load <= tj_fu_52;
        end if; 
    end process;


    ap_sig_allocacmp_tp_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, tp_fu_56)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_tp_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_tp_1 <= tp_fu_56;
        end if; 
    end process;

    empty_32_fu_128_p1 <= add_ln95_fu_122_p2(4 - 1 downto 0);
    empty_33_fu_152_p2 <= std_logic_vector(unsigned(p_shl3_fu_132_p3) - unsigned(p_shl12_cast_fu_148_p1));
    empty_35_fu_241_p1 <= add_ln95_1_fu_197_p2(4 - 1 downto 0);
    icmp_ln94_fu_158_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten48_load = ap_const_lv6_24) else "0";
    icmp_ln96_fu_179_p2 <= "1" when (ap_sig_allocacmp_tj_load = ap_const_lv4_C) else "0";
    layer1_output_V_address0 <= zext_ln97_3_fu_328_p1(8 - 1 downto 0);

    layer1_output_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_V_ce0 <= ap_const_logic_1;
        else 
            layer1_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    linear_input_V_address0 <= zext_ln97_fu_333_p1(8 - 1 downto 0);

    linear_input_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linear_input_V_ce0 <= ap_const_logic_1;
        else 
            linear_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    linear_input_V_d0 <= layer1_output_V_q0;

    linear_input_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linear_input_V_we0 <= ap_const_logic_1;
        else 
            linear_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid146_fu_265_p2 <= std_logic_vector(unsigned(p_shl11_mid1_fu_245_p3) - unsigned(p_shl12_cast_mid1_fu_261_p1));
    p_shl11_mid1_fu_245_p3 <= (empty_35_fu_241_p1 & ap_const_lv4_0);
        p_shl12_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl4_fu_140_p3),8));

        p_shl12_cast_mid1_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl12_mid1_fu_253_p3),8));

    p_shl12_mid1_fu_253_p3 <= (add_ln95_1_fu_197_p2 & ap_const_lv2_0);
    p_shl3_fu_132_p3 <= (empty_32_fu_128_p1 & ap_const_lv4_0);
    p_shl4_fu_140_p3 <= (add_ln95_fu_122_p2 & ap_const_lv2_0);
    select_ln94_1_fu_203_p3 <= 
        add_ln95_1_fu_197_p2 when (icmp_ln96_fu_179_p2(0) = '1') else 
        add_ln95_fu_122_p2;
    select_ln94_2_fu_271_p3 <= 
        p_mid146_fu_265_p2 when (icmp_ln96_fu_179_p2(0) = '1') else 
        empty_33_fu_152_p2;
    select_ln94_3_fu_279_p3 <= 
        add_ln94_fu_173_p2 when (icmp_ln96_fu_179_p2(0) = '1') else 
        ap_sig_allocacmp_tp_1;
    select_ln94_fu_185_p3 <= 
        ap_const_lv4_0 when (icmp_ln96_fu_179_p2(0) = '1') else 
        ap_sig_allocacmp_tj_load;
    sub_ln97_fu_235_p2 <= std_logic_vector(unsigned(tmp_6_fu_215_p3) - unsigned(zext_ln97_1_fu_231_p1));
    tmp_6_fu_215_p3 <= (trunc_ln97_fu_211_p1 & ap_const_lv4_0);
    tmp_7_fu_223_p3 <= (select_ln94_1_fu_203_p3 & ap_const_lv2_0);
    trunc_ln97_fu_211_p1 <= select_ln94_1_fu_203_p3(4 - 1 downto 0);
    zext_ln94_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_173_p2),5));
    zext_ln94_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_tp_1),5));
    zext_ln97_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_223_p3),8));
    zext_ln97_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln94_fu_185_p3),8));
    zext_ln97_3_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_2_fu_323_p2),64));
    zext_ln97_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln97_reg_372_pp0_iter1_reg),64));
end behav;
