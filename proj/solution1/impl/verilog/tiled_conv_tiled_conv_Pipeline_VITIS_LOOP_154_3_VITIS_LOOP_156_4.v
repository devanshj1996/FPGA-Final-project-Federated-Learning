// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_154_3_VITIS_LOOP_156_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        layer1_output_V_0_address0,
        layer1_output_V_0_ce0,
        layer1_output_V_0_q0,
        linear_input_V_address0,
        linear_input_V_ce0,
        linear_input_V_we0,
        linear_input_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] empty;
output  [7:0] layer1_output_V_0_address0;
output   layer1_output_V_0_ce0;
input  [14:0] layer1_output_V_0_q0;
output  [7:0] linear_input_V_address0;
output   linear_input_V_ce0;
output   linear_input_V_we0;
output  [14:0] linear_input_V_d0;

reg ap_idle;
reg layer1_output_V_0_ce0;
reg linear_input_V_ce0;
reg linear_input_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln154_fu_156_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] empty_30_fu_150_p2;
reg   [7:0] empty_30_reg_346;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln156_fu_177_p2;
reg   [0:0] icmp_ln156_reg_355;
wire   [3:0] select_ln154_fu_183_p3;
reg   [3:0] select_ln154_reg_360;
wire   [4:0] select_ln154_1_fu_201_p3;
reg   [4:0] select_ln154_1_reg_365;
wire   [3:0] trunc_ln157_fu_209_p1;
reg   [3:0] trunc_ln157_reg_370;
wire   [7:0] p_mid138_fu_237_p2;
reg   [7:0] p_mid138_reg_375;
wire   [7:0] add_ln157_fu_315_p2;
reg   [7:0] add_ln157_reg_385;
wire   [63:0] zext_ln157_3_fu_310_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln157_fu_321_p1;
reg   [3:0] tj_fu_50;
wire   [3:0] add_ln156_fu_251_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_tj_load;
reg   [1:0] tp_fu_54;
wire   [1:0] select_ln154_3_fu_243_p3;
reg   [1:0] ap_sig_allocacmp_tp_1;
reg   [5:0] indvar_flatten40_fu_58;
wire   [5:0] add_ln154_1_fu_162_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten40_load;
wire   [4:0] zext_ln154_fu_116_p1;
wire   [4:0] add_ln155_fu_120_p2;
wire   [3:0] empty_29_fu_126_p1;
wire   [6:0] p_shl4_fu_138_p3;
wire   [7:0] p_shl3_fu_130_p3;
wire  signed [7:0] p_shl11_cast_fu_146_p1;
wire   [1:0] add_ln154_fu_171_p2;
wire   [4:0] zext_ln154_1_fu_191_p1;
wire   [4:0] add_ln155_1_fu_195_p2;
wire   [3:0] empty_32_fu_213_p1;
wire   [6:0] p_shl11_mid1_fu_225_p3;
wire   [7:0] p_shl10_mid1_fu_217_p3;
wire  signed [7:0] p_shl11_cast_mid1_fu_233_p1;
wire   [6:0] tmp_7_fu_279_p3;
wire   [7:0] tmp_6_fu_272_p3;
wire   [7:0] zext_ln157_1_fu_286_p1;
wire   [7:0] sub_ln157_fu_290_p2;
wire   [7:0] zext_ln157_2_fu_301_p1;
wire   [7:0] add_ln157_1_fu_304_p2;
wire   [7:0] select_ln154_2_fu_296_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln154_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten40_fu_58 <= add_ln154_1_fu_162_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten40_fu_58 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln154_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            tj_fu_50 <= add_ln156_fu_251_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            tj_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln154_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            tp_fu_54 <= select_ln154_3_fu_243_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            tp_fu_54 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln157_reg_385 <= add_ln157_fu_315_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        empty_30_reg_346[7 : 2] <= empty_30_fu_150_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_156_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln156_reg_355 <= icmp_ln156_fu_177_p2;
        p_mid138_reg_375[7 : 2] <= p_mid138_fu_237_p2[7 : 2];
        select_ln154_1_reg_365 <= select_ln154_1_fu_201_p3;
        select_ln154_reg_360 <= select_ln154_fu_183_p3;
        trunc_ln157_reg_370 <= trunc_ln157_fu_209_p1;
    end
end

always @ (*) begin
    if (((icmp_ln154_fu_156_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten40_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten40_load = indvar_flatten40_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tj_load = 4'd0;
    end else begin
        ap_sig_allocacmp_tj_load = tj_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tp_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_tp_1 = tp_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_0_ce0 = 1'b1;
    end else begin
        layer1_output_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linear_input_V_ce0 = 1'b1;
    end else begin
        linear_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linear_input_V_we0 = 1'b1;
    end else begin
        linear_input_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln154_1_fu_162_p2 = (ap_sig_allocacmp_indvar_flatten40_load + 6'd1);

assign add_ln154_fu_171_p2 = (ap_sig_allocacmp_tp_1 + 2'd1);

assign add_ln155_1_fu_195_p2 = (zext_ln154_1_fu_191_p1 + empty);

assign add_ln155_fu_120_p2 = (zext_ln154_fu_116_p1 + empty);

assign add_ln156_fu_251_p2 = (select_ln154_fu_183_p3 + 4'd1);

assign add_ln157_1_fu_304_p2 = (sub_ln157_fu_290_p2 + zext_ln157_2_fu_301_p1);

assign add_ln157_fu_315_p2 = (zext_ln157_2_fu_301_p1 + select_ln154_2_fu_296_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_29_fu_126_p1 = add_ln155_fu_120_p2[3:0];

assign empty_30_fu_150_p2 = ($signed(p_shl3_fu_130_p3) - $signed(p_shl11_cast_fu_146_p1));

assign empty_32_fu_213_p1 = add_ln155_1_fu_195_p2[3:0];

assign icmp_ln154_fu_156_p2 = ((ap_sig_allocacmp_indvar_flatten40_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_177_p2 = ((ap_sig_allocacmp_tj_load == 4'd12) ? 1'b1 : 1'b0);

assign layer1_output_V_0_address0 = zext_ln157_3_fu_310_p1;

assign linear_input_V_address0 = zext_ln157_fu_321_p1;

assign linear_input_V_d0 = layer1_output_V_0_q0;

assign p_mid138_fu_237_p2 = ($signed(p_shl10_mid1_fu_217_p3) - $signed(p_shl11_cast_mid1_fu_233_p1));

assign p_shl10_mid1_fu_217_p3 = {{empty_32_fu_213_p1}, {4'd0}};

assign p_shl11_cast_fu_146_p1 = $signed(p_shl4_fu_138_p3);

assign p_shl11_cast_mid1_fu_233_p1 = $signed(p_shl11_mid1_fu_225_p3);

assign p_shl11_mid1_fu_225_p3 = {{add_ln155_1_fu_195_p2}, {2'd0}};

assign p_shl3_fu_130_p3 = {{empty_29_fu_126_p1}, {4'd0}};

assign p_shl4_fu_138_p3 = {{add_ln155_fu_120_p2}, {2'd0}};

assign select_ln154_1_fu_201_p3 = ((icmp_ln156_fu_177_p2[0:0] == 1'b1) ? add_ln155_1_fu_195_p2 : add_ln155_fu_120_p2);

assign select_ln154_2_fu_296_p3 = ((icmp_ln156_reg_355[0:0] == 1'b1) ? p_mid138_reg_375 : empty_30_reg_346);

assign select_ln154_3_fu_243_p3 = ((icmp_ln156_fu_177_p2[0:0] == 1'b1) ? add_ln154_fu_171_p2 : ap_sig_allocacmp_tp_1);

assign select_ln154_fu_183_p3 = ((icmp_ln156_fu_177_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_tj_load);

assign sub_ln157_fu_290_p2 = (tmp_6_fu_272_p3 - zext_ln157_1_fu_286_p1);

assign tmp_6_fu_272_p3 = {{trunc_ln157_reg_370}, {4'd0}};

assign tmp_7_fu_279_p3 = {{select_ln154_1_reg_365}, {2'd0}};

assign trunc_ln157_fu_209_p1 = select_ln154_1_fu_201_p3[3:0];

assign zext_ln154_1_fu_191_p1 = add_ln154_fu_171_p2;

assign zext_ln154_fu_116_p1 = ap_sig_allocacmp_tp_1;

assign zext_ln157_1_fu_286_p1 = tmp_7_fu_279_p3;

assign zext_ln157_2_fu_301_p1 = select_ln154_reg_360;

assign zext_ln157_3_fu_310_p1 = add_ln157_1_fu_304_p2;

assign zext_ln157_fu_321_p1 = add_ln157_reg_385;

always @ (posedge ap_clk) begin
    empty_30_reg_346[1:0] <= 2'b00;
    p_mid138_reg_375[1:0] <= 2'b00;
end

endmodule //tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_154_3_VITIS_LOOP_156_4
