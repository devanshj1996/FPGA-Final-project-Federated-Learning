-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_cast : IN STD_LOGIC_VECTOR (5 downto 0);
    trunc_ln2 : IN STD_LOGIC_VECTOR (2 downto 0);
    conv_in_buf_V_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_in_buf_V_0_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_0_we0 : OUT STD_LOGIC;
    conv_in_buf_V_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    trunc_ln4 : IN STD_LOGIC_VECTOR (2 downto 0);
    sext_ln36 : IN STD_LOGIC_VECTOR (5 downto 0);
    input_feature_map : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln36_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op86_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal icmp_ln36_reg_503_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op93_read_state10 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fm_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln36_cast_fu_176_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln36_cast_reg_498 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln36_reg_503_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_503_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_268_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_fu_276_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_512 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_2_fu_320_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln36_2_reg_518 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_354_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_523_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_in_buf_V_0_addr_reg_527 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_in_buf_V_0_addr_reg_527_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal fm_addr_reg_532 : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_read_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_168_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln46_2_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln46_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_2_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_fu_205_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast_cast_fu_180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln38_fu_209_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln46_1_fu_223_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1_fu_215_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_1_fu_231_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln40_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_256_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_1_fu_284_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln38_1_fu_288_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln46_1_mid1_fu_302_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln46_mid1_fu_294_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln46_2_fu_310_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln46_1_fu_314_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln46_fu_235_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln36_fu_328_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln42_fu_338_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln43_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln36_1_fu_332_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln43_fu_348_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_390_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_383_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_3_fu_401_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_1_fu_410_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_4_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln46_3_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln46_2_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_1_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln46_1_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_452_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_281 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_281)) then
                if (((tmp_fu_354_p3 = ap_const_lv1_1) and (icmp_ln36_fu_241_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_164 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_164 <= ap_phi_reg_pp0_iter0_storemerge_reg_164;
                end if;
            end if; 
        end if;
    end process;

    i_1_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_241_p2 = ap_const_lv1_0))) then 
                    i_1_fu_102 <= select_ln36_1_fu_276_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_102 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_241_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_106 <= add_ln36_2_fu_247_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_106 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_241_p2 = ap_const_lv1_0))) then 
                    j_fu_98 <= add_ln40_fu_362_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_98 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln36_reg_503 <= icmp_ln36_fu_241_p2;
                icmp_ln36_reg_503_pp0_iter1_reg <= icmp_ln36_reg_503;
                sext_ln36_cast_reg_498 <= sext_ln36_cast_fu_176_p1;
                tmp_reg_523_pp0_iter1_reg <= tmp_reg_523;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter2_reg <= conv_in_buf_V_0_addr_reg_527;
                conv_in_buf_V_0_addr_reg_527_pp0_iter3_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter2_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter4_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter3_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter5_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter4_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter6_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter5_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter7_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter6_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter8_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter7_reg;
                conv_in_buf_V_0_addr_reg_527_pp0_iter9_reg <= conv_in_buf_V_0_addr_reg_527_pp0_iter8_reg;
                icmp_ln36_reg_503_pp0_iter2_reg <= icmp_ln36_reg_503_pp0_iter1_reg;
                icmp_ln36_reg_503_pp0_iter3_reg <= icmp_ln36_reg_503_pp0_iter2_reg;
                icmp_ln36_reg_503_pp0_iter4_reg <= icmp_ln36_reg_503_pp0_iter3_reg;
                icmp_ln36_reg_503_pp0_iter5_reg <= icmp_ln36_reg_503_pp0_iter4_reg;
                icmp_ln36_reg_503_pp0_iter6_reg <= icmp_ln36_reg_503_pp0_iter5_reg;
                icmp_ln36_reg_503_pp0_iter7_reg <= icmp_ln36_reg_503_pp0_iter6_reg;
                icmp_ln36_reg_503_pp0_iter8_reg <= icmp_ln36_reg_503_pp0_iter7_reg;
                icmp_ln36_reg_503_pp0_iter9_reg <= icmp_ln36_reg_503_pp0_iter8_reg;
                tmp_reg_523_pp0_iter2_reg <= tmp_reg_523_pp0_iter1_reg;
                tmp_reg_523_pp0_iter3_reg <= tmp_reg_523_pp0_iter2_reg;
                tmp_reg_523_pp0_iter4_reg <= tmp_reg_523_pp0_iter3_reg;
                tmp_reg_523_pp0_iter5_reg <= tmp_reg_523_pp0_iter4_reg;
                tmp_reg_523_pp0_iter6_reg <= tmp_reg_523_pp0_iter5_reg;
                tmp_reg_523_pp0_iter7_reg <= tmp_reg_523_pp0_iter6_reg;
                tmp_reg_523_pp0_iter8_reg <= tmp_reg_523_pp0_iter7_reg;
                tmp_reg_523_pp0_iter9_reg <= tmp_reg_523_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge_reg_164 <= ap_phi_reg_pp0_iter9_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_storemerge_reg_164 <= ap_phi_reg_pp0_iter1_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_164 <= ap_phi_reg_pp0_iter2_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_164 <= ap_phi_reg_pp0_iter3_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_storemerge_reg_164 <= ap_phi_reg_pp0_iter4_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge_reg_164 <= ap_phi_reg_pp0_iter5_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge_reg_164 <= ap_phi_reg_pp0_iter6_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_storemerge_reg_164 <= ap_phi_reg_pp0_iter7_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge_reg_164 <= ap_phi_reg_pp0_iter8_storemerge_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_503 = ap_const_lv1_0))) then
                conv_in_buf_V_0_addr_reg_527 <= zext_ln46_2_fu_419_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op93_read_state10 = ap_const_boolean_1))) then
                fm_addr_read_reg_538 <= m_axi_fm_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_523 = ap_const_lv1_0) and (icmp_ln36_reg_503 = ap_const_lv1_0))) then
                fm_addr_reg_532 <= sext_ln46_fu_462_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_241_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln36_1_reg_512 <= select_ln36_1_fu_276_p3;
                    select_ln36_2_reg_518(12 downto 3) <= select_ln36_2_fu_320_p3(12 downto 3);
                select_ln36_reg_507 <= select_ln36_fu_268_p3;
                tmp_reg_523 <= or_ln43_fu_348_p2(2 downto 2);
            end if;
        end if;
    end process;
    select_ln36_2_reg_518(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_1_fu_332_p2 <= std_logic_vector(unsigned(trunc_ln36_fu_328_p1) + unsigned(trunc_ln2));
    add_ln36_2_fu_247_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln36_fu_256_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln38_1_fu_288_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_284_p1) + unsigned(p_cast_cast_fu_180_p1));
    add_ln38_fu_209_p2 <= std_logic_vector(unsigned(zext_ln36_fu_205_p1) + unsigned(p_cast_cast_fu_180_p1));
    add_ln40_fu_362_p2 <= std_logic_vector(unsigned(select_ln36_fu_268_p3) + unsigned(ap_const_lv4_1));
    add_ln43_fu_342_p2 <= std_logic_vector(unsigned(trunc_ln42_fu_338_p1) + unsigned(trunc_ln4));
    add_ln46_1_fu_446_p2 <= std_logic_vector(unsigned(add_ln46_2_fu_441_p2) + unsigned(sext_ln36_1_fu_407_p1));
    add_ln46_2_fu_441_p2 <= std_logic_vector(signed(sext_ln46_3_fu_437_p1) + signed(input_feature_map));
    add_ln46_3_fu_401_p2 <= std_logic_vector(unsigned(tmp_9_fu_383_p3) + unsigned(zext_ln46_fu_397_p1));
    add_ln46_4_fu_413_p2 <= std_logic_vector(unsigned(add_ln46_3_fu_401_p2) + unsigned(zext_ln46_1_fu_410_p1));
    add_ln46_fu_424_p2 <= std_logic_vector(unsigned(zext_ln46_1_fu_410_p1) + unsigned(sext_ln36_cast_reg_498));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, m_axi_fm_RVALID, ap_block_state3_io, ap_predicate_op93_read_state10)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_fm_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op93_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, m_axi_fm_RVALID, ap_block_state3_io, ap_predicate_op93_read_state10)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_fm_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op93_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_fm_RVALID, ap_predicate_op93_read_state10)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((m_axi_fm_RVALID = ap_const_logic_0) and (ap_predicate_op93_read_state10 = ap_const_boolean_1));
    end process;

        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_fm_ARREADY, ap_predicate_op86_readreq_state3)
    begin
                ap_block_state3_io <= ((m_axi_fm_ARREADY = ap_const_logic_0) and (ap_predicate_op86_readreq_state3 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_281_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_281 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln36_fu_241_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_241_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_storemerge_phi_fu_168_p4_assign_proc : process(icmp_ln36_reg_503_pp0_iter9_reg, tmp_reg_523_pp0_iter9_reg, fm_addr_read_reg_538, ap_phi_reg_pp0_iter10_storemerge_reg_164)
    begin
        if (((tmp_reg_523_pp0_iter9_reg = ap_const_lv1_0) and (icmp_ln36_reg_503_pp0_iter9_reg = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge_phi_fu_168_p4 <= fm_addr_read_reg_538;
        else 
            ap_phi_mux_storemerge_phi_fu_168_p4 <= ap_phi_reg_pp0_iter10_storemerge_reg_164;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_reg_164 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op86_readreq_state3_assign_proc : process(icmp_ln36_reg_503_pp0_iter1_reg, tmp_reg_523_pp0_iter1_reg)
    begin
                ap_predicate_op86_readreq_state3 <= ((tmp_reg_523_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln36_reg_503_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op93_read_state10_assign_proc : process(icmp_ln36_reg_503_pp0_iter8_reg, tmp_reg_523_pp0_iter8_reg)
    begin
                ap_predicate_op93_read_state10 <= ((tmp_reg_523_pp0_iter8_reg = ap_const_lv1_0) and (icmp_ln36_reg_503_pp0_iter8_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_102)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_106)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_98, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_98;
        end if; 
    end process;

    conv_in_buf_V_0_address0 <= conv_in_buf_V_0_addr_reg_527_pp0_iter9_reg;

    conv_in_buf_V_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_0_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_0_d0 <= ap_phi_mux_storemerge_phi_fu_168_p4;

    conv_in_buf_V_0_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_0_we0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fm_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_fm_ARREADY, ap_predicate_op86_readreq_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op86_readreq_state3 = ap_const_boolean_1))) then 
            fm_blk_n_AR <= m_axi_fm_ARREADY;
        else 
            fm_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_fm_RVALID, ap_predicate_op93_read_state10, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op93_read_state10 = ap_const_boolean_1))) then 
            fm_blk_n_R <= m_axi_fm_RVALID;
        else 
            fm_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln36_fu_241_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_64) else "0";
    icmp_ln40_fu_262_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_A) else "0";
    m_axi_fm_ARADDR <= fm_addr_reg_532;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_1;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;

    m_axi_fm_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op86_readreq_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op86_readreq_state3 = ap_const_boolean_1))) then 
            m_axi_fm_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fm_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_AWADDR <= ap_const_lv64_0;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_0;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;
    m_axi_fm_AWVALID <= ap_const_logic_0;
    m_axi_fm_BREADY <= ap_const_logic_0;

    m_axi_fm_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_predicate_op93_read_state10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op93_read_state10 = ap_const_boolean_1))) then 
            m_axi_fm_RREADY <= ap_const_logic_1;
        else 
            m_axi_fm_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_WDATA <= ap_const_lv16_0;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_0;
    m_axi_fm_WUSER <= ap_const_lv1_0;
    m_axi_fm_WVALID <= ap_const_logic_0;
    or_ln43_fu_348_p2 <= (add_ln43_fu_342_p2 or add_ln36_1_fu_332_p2);
        p_cast_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast),7));

    select_ln36_1_fu_276_p3 <= 
        add_ln36_fu_256_p2 when (icmp_ln40_fu_262_p2(0) = '1') else 
        ap_sig_allocacmp_i;
    select_ln36_2_fu_320_p3 <= 
        sub_ln46_1_fu_314_p2 when (icmp_ln40_fu_262_p2(0) = '1') else 
        sub_ln46_fu_235_p2;
    select_ln36_fu_268_p3 <= 
        ap_const_lv4_0 when (icmp_ln40_fu_262_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln36_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln36_2_reg_518),64));

        sext_ln36_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln36),7));

        sext_ln46_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln46_1_fu_223_p3),13));

        sext_ln46_2_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln46_1_mid1_fu_302_p3),13));

        sext_ln46_3_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_429_p3),64));

        sext_ln46_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_452_p4),64));

    shl_ln1_fu_215_p3 <= (add_ln38_fu_209_p2 & ap_const_lv6_0);
    shl_ln46_1_fu_223_p3 <= (add_ln38_fu_209_p2 & ap_const_lv3_0);
    shl_ln46_1_mid1_fu_302_p3 <= (add_ln38_1_fu_288_p2 & ap_const_lv3_0);
    shl_ln46_mid1_fu_294_p3 <= (add_ln38_1_fu_288_p2 & ap_const_lv6_0);
    sub_ln46_1_fu_314_p2 <= std_logic_vector(unsigned(shl_ln46_mid1_fu_294_p3) - unsigned(sext_ln46_2_fu_310_p1));
    sub_ln46_fu_235_p2 <= std_logic_vector(unsigned(shl_ln1_fu_215_p3) - unsigned(sext_ln46_1_fu_231_p1));
    tmp_10_fu_390_p3 <= (select_ln36_1_reg_512 & ap_const_lv1_0);
    tmp_11_fu_429_p3 <= (add_ln46_fu_424_p2 & ap_const_lv1_0);
    tmp_9_fu_383_p3 <= (select_ln36_1_reg_512 & ap_const_lv3_0);
    tmp_fu_354_p3 <= or_ln43_fu_348_p2(2 downto 2);
    trunc_ln36_fu_328_p1 <= select_ln36_1_fu_276_p3(3 - 1 downto 0);
    trunc_ln42_fu_338_p1 <= select_ln36_fu_268_p3(3 - 1 downto 0);
    trunc_ln5_fu_452_p4 <= add_ln46_1_fu_446_p2(63 downto 1);
    zext_ln36_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_256_p2),7));
    zext_ln36_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),7));
    zext_ln46_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_507),7));
    zext_ln46_2_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_4_fu_413_p2),64));
    zext_ln46_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_390_p3),7));
end behav;
