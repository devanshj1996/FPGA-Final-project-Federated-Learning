// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_94_2_VITIS_LOOP_96_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        layer1_output_V_address0,
        layer1_output_V_ce0,
        layer1_output_V_q0,
        linear_input_V_address0,
        linear_input_V_ce0,
        linear_input_V_we0,
        linear_input_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] empty;
output  [7:0] layer1_output_V_address0;
output   layer1_output_V_ce0;
input  [14:0] layer1_output_V_q0;
output  [7:0] linear_input_V_address0;
output   linear_input_V_ce0;
output   linear_input_V_we0;
output  [14:0] linear_input_V_d0;

reg ap_idle;
reg layer1_output_V_ce0;
reg linear_input_V_ce0;
reg linear_input_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln94_fu_158_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] sub_ln97_fu_235_p2;
reg   [7:0] sub_ln97_reg_362;
wire   [7:0] zext_ln97_2_fu_287_p1;
reg   [7:0] zext_ln97_2_reg_367;
wire   [7:0] add_ln97_fu_291_p2;
reg   [7:0] add_ln97_reg_372;
reg   [7:0] add_ln97_reg_372_pp0_iter1_reg;
wire   [63:0] zext_ln97_3_fu_328_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln97_fu_333_p1;
reg   [3:0] tj_fu_52;
wire   [3:0] add_ln96_fu_297_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_tj_load;
reg   [1:0] tp_fu_56;
wire   [1:0] select_ln94_3_fu_279_p3;
reg   [1:0] ap_sig_allocacmp_tp_1;
reg   [5:0] indvar_flatten48_fu_60;
wire   [5:0] add_ln94_1_fu_164_p2;
reg   [5:0] ap_sig_allocacmp_indvar_flatten48_load;
wire   [4:0] zext_ln94_fu_118_p1;
wire   [4:0] add_ln95_fu_122_p2;
wire   [3:0] empty_32_fu_128_p1;
wire   [6:0] p_shl4_fu_140_p3;
wire   [7:0] p_shl3_fu_132_p3;
wire  signed [7:0] p_shl12_cast_fu_148_p1;
wire   [0:0] icmp_ln96_fu_179_p2;
wire   [1:0] add_ln94_fu_173_p2;
wire   [4:0] zext_ln94_1_fu_193_p1;
wire   [4:0] add_ln95_1_fu_197_p2;
wire   [4:0] select_ln94_1_fu_203_p3;
wire   [3:0] trunc_ln97_fu_211_p1;
wire   [6:0] tmp_7_fu_223_p3;
wire   [7:0] tmp_6_fu_215_p3;
wire   [7:0] zext_ln97_1_fu_231_p1;
wire   [3:0] empty_35_fu_241_p1;
wire   [6:0] p_shl12_mid1_fu_253_p3;
wire   [7:0] p_shl11_mid1_fu_245_p3;
wire  signed [7:0] p_shl12_cast_mid1_fu_261_p1;
wire   [7:0] p_mid146_fu_265_p2;
wire   [7:0] empty_33_fu_152_p2;
wire   [3:0] select_ln94_fu_185_p3;
wire   [7:0] select_ln94_2_fu_271_p3;
wire   [7:0] add_ln97_1_fu_318_p2;
wire   [7:0] add_ln97_2_fu_323_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln94_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten48_fu_60 <= add_ln94_1_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten48_fu_60 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln94_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            tj_fu_52 <= add_ln96_fu_297_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            tj_fu_52 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln94_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            tp_fu_56 <= select_ln94_3_fu_279_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            tp_fu_56 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_158_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln97_reg_372 <= add_ln97_fu_291_p2;
        sub_ln97_reg_362[7 : 2] <= sub_ln97_fu_235_p2[7 : 2];
        zext_ln97_2_reg_367[3 : 0] <= zext_ln97_2_fu_287_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln97_reg_372_pp0_iter1_reg <= add_ln97_reg_372;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((icmp_ln94_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten48_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten48_load = indvar_flatten48_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tj_load = 4'd0;
    end else begin
        ap_sig_allocacmp_tj_load = tj_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_tp_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_tp_1 = tp_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_V_ce0 = 1'b1;
    end else begin
        layer1_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linear_input_V_ce0 = 1'b1;
    end else begin
        linear_input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linear_input_V_we0 = 1'b1;
    end else begin
        linear_input_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln94_1_fu_164_p2 = (ap_sig_allocacmp_indvar_flatten48_load + 6'd1);

assign add_ln94_fu_173_p2 = (ap_sig_allocacmp_tp_1 + 2'd1);

assign add_ln95_1_fu_197_p2 = (zext_ln94_1_fu_193_p1 + empty);

assign add_ln95_fu_122_p2 = (zext_ln94_fu_118_p1 + empty);

assign add_ln96_fu_297_p2 = (select_ln94_fu_185_p3 + 4'd1);

assign add_ln97_1_fu_318_p2 = ($signed(sub_ln97_reg_362) + $signed(8'd144));

assign add_ln97_2_fu_323_p2 = (add_ln97_1_fu_318_p2 + zext_ln97_2_reg_367);

assign add_ln97_fu_291_p2 = (zext_ln97_2_fu_287_p1 + select_ln94_2_fu_271_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_32_fu_128_p1 = add_ln95_fu_122_p2[3:0];

assign empty_33_fu_152_p2 = ($signed(p_shl3_fu_132_p3) - $signed(p_shl12_cast_fu_148_p1));

assign empty_35_fu_241_p1 = add_ln95_1_fu_197_p2[3:0];

assign icmp_ln94_fu_158_p2 = ((ap_sig_allocacmp_indvar_flatten48_load == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_179_p2 = ((ap_sig_allocacmp_tj_load == 4'd12) ? 1'b1 : 1'b0);

assign layer1_output_V_address0 = zext_ln97_3_fu_328_p1;

assign linear_input_V_address0 = zext_ln97_fu_333_p1;

assign linear_input_V_d0 = layer1_output_V_q0;

assign p_mid146_fu_265_p2 = ($signed(p_shl11_mid1_fu_245_p3) - $signed(p_shl12_cast_mid1_fu_261_p1));

assign p_shl11_mid1_fu_245_p3 = {{empty_35_fu_241_p1}, {4'd0}};

assign p_shl12_cast_fu_148_p1 = $signed(p_shl4_fu_140_p3);

assign p_shl12_cast_mid1_fu_261_p1 = $signed(p_shl12_mid1_fu_253_p3);

assign p_shl12_mid1_fu_253_p3 = {{add_ln95_1_fu_197_p2}, {2'd0}};

assign p_shl3_fu_132_p3 = {{empty_32_fu_128_p1}, {4'd0}};

assign p_shl4_fu_140_p3 = {{add_ln95_fu_122_p2}, {2'd0}};

assign select_ln94_1_fu_203_p3 = ((icmp_ln96_fu_179_p2[0:0] == 1'b1) ? add_ln95_1_fu_197_p2 : add_ln95_fu_122_p2);

assign select_ln94_2_fu_271_p3 = ((icmp_ln96_fu_179_p2[0:0] == 1'b1) ? p_mid146_fu_265_p2 : empty_33_fu_152_p2);

assign select_ln94_3_fu_279_p3 = ((icmp_ln96_fu_179_p2[0:0] == 1'b1) ? add_ln94_fu_173_p2 : ap_sig_allocacmp_tp_1);

assign select_ln94_fu_185_p3 = ((icmp_ln96_fu_179_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_tj_load);

assign sub_ln97_fu_235_p2 = (tmp_6_fu_215_p3 - zext_ln97_1_fu_231_p1);

assign tmp_6_fu_215_p3 = {{trunc_ln97_fu_211_p1}, {4'd0}};

assign tmp_7_fu_223_p3 = {{select_ln94_1_fu_203_p3}, {2'd0}};

assign trunc_ln97_fu_211_p1 = select_ln94_1_fu_203_p3[3:0];

assign zext_ln94_1_fu_193_p1 = add_ln94_fu_173_p2;

assign zext_ln94_fu_118_p1 = ap_sig_allocacmp_tp_1;

assign zext_ln97_1_fu_231_p1 = tmp_7_fu_223_p3;

assign zext_ln97_2_fu_287_p1 = select_ln94_fu_185_p3;

assign zext_ln97_3_fu_328_p1 = add_ln97_2_fu_323_p2;

assign zext_ln97_fu_333_p1 = add_ln97_reg_372_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    sub_ln97_reg_362[1:0] <= 2'b00;
    zext_ln97_2_reg_367[7:4] <= 4'b0000;
end

endmodule //tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_94_2_VITIS_LOOP_96_3
