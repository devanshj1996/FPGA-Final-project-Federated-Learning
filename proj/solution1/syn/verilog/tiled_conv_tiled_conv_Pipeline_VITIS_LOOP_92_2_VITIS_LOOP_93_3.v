// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_92_2_VITIS_LOOP_93_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_buf_V_0_address0,
        max_pool_out_buf_V_0_ce0,
        max_pool_out_buf_V_0_we0,
        max_pool_out_buf_V_0_d0,
        p_out_i,
        p_out_o,
        p_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] max_pool_out_buf_V_0_address0;
output   max_pool_out_buf_V_0_ce0;
output   max_pool_out_buf_V_0_we0;
output  [14:0] max_pool_out_buf_V_0_d0;
input  [31:0] p_out_i;
output  [31:0] p_out_o;
output   p_out_o_ap_vld;

reg ap_idle;
reg max_pool_out_buf_V_0_ce0;
reg max_pool_out_buf_V_0_we0;
reg[31:0] p_out_o;
reg p_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln92_fu_106_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] select_ln92_fu_136_p3;
reg   [1:0] select_ln92_reg_365;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] select_ln92_1_fu_144_p3;
reg   [1:0] select_ln92_1_reg_370;
wire   [2:0] add_ln94_1_fu_160_p2;
reg   [2:0] add_ln94_1_reg_376;
wire   [63:0] zext_ln96_2_fu_216_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] p_Result_s_fu_311_p3;
reg   [1:0] j_fu_62;
wire   [1:0] add_ln93_fu_166_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [1:0] i_fu_66;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [3:0] indvar_flatten28_fu_70;
wire   [3:0] add_ln92_1_fu_112_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten28_load;
wire   [0:0] icmp_ln95_fu_329_p2;
wire   [0:0] icmp_ln93_fu_130_p2;
wire   [1:0] add_ln92_fu_124_p2;
wire   [2:0] j_4_cast_fu_156_p1;
wire   [2:0] zext_ln92_fu_152_p1;
wire   [3:0] tmp_s_fu_194_p3;
wire   [3:0] zext_ln96_fu_191_p1;
wire   [3:0] sub_ln96_fu_201_p2;
wire   [3:0] zext_ln96_1_fu_207_p1;
wire   [3:0] add_ln96_fu_210_p2;
wire   [4:0] shl_ln4_fu_224_p3;
wire   [5:0] zext_ln94_fu_231_p1;
wire   [5:0] zext_ln94_1_fu_221_p1;
wire   [5:0] sub_ln94_fu_235_p2;
wire   [0:0] icmp_ln209_fu_241_p2;
wire   [31:0] p_Val2_s_fu_247_p3;
wire   [0:0] trunc_ln728_fu_255_p1;
wire   [0:0] tmp_1_fu_267_p3;
wire   [0:0] xor_ln215_fu_275_p2;
wire   [0:0] tmp_fu_259_p3;
wire   [0:0] xor_ln215_1_fu_281_p2;
wire   [0:0] tmp_2_fu_287_p3;
wire   [0:0] new_bit_fu_295_p2;
wire   [30:0] r_V_2_fu_301_p4;
wire   [1:0] trunc_ln9_fu_319_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln92_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_66 <= select_ln92_1_fu_144_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln92_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten28_fu_70 <= add_ln92_1_fu_112_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten28_fu_70 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln92_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_62 <= add_ln93_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln94_1_reg_376 <= add_ln94_1_fu_160_p2;
        select_ln92_1_reg_370 <= select_ln92_1_fu_144_p3;
        select_ln92_reg_365 <= select_ln92_fu_136_p3;
    end
end

always @ (*) begin
    if (((icmp_ln92_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten28_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten28_load = indvar_flatten28_fu_70;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_out_buf_V_0_ce0 = 1'b1;
    end else begin
        max_pool_out_buf_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln95_fu_329_p2 == 1'd1))) begin
        max_pool_out_buf_V_0_we0 = 1'b1;
    end else begin
        max_pool_out_buf_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_o = p_Result_s_fu_311_p3;
    end else begin
        p_out_o = p_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_o_ap_vld = 1'b1;
    end else begin
        p_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln92_1_fu_112_p2 = (ap_sig_allocacmp_indvar_flatten28_load + 4'd1);

assign add_ln92_fu_124_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln93_fu_166_p2 = (select_ln92_fu_136_p3 + 2'd1);

assign add_ln94_1_fu_160_p2 = (j_4_cast_fu_156_p1 + zext_ln92_fu_152_p1);

assign add_ln96_fu_210_p2 = (sub_ln96_fu_201_p2 + zext_ln96_1_fu_207_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln209_fu_241_p2 = ((sub_ln94_fu_235_p2 == 6'd1) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_106_p2 = ((ap_sig_allocacmp_indvar_flatten28_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_130_p2 = ((ap_sig_allocacmp_j_load == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_329_p2 = ((trunc_ln9_fu_319_p4 == 2'd0) ? 1'b1 : 1'b0);

assign j_4_cast_fu_156_p1 = select_ln92_fu_136_p3;

assign max_pool_out_buf_V_0_address0 = zext_ln96_2_fu_216_p1;

assign max_pool_out_buf_V_0_d0 = 15'd0;

assign new_bit_fu_295_p2 = (xor_ln215_1_fu_281_p2 ^ tmp_2_fu_287_p3);

assign p_Result_s_fu_311_p3 = {{new_bit_fu_295_p2}, {r_V_2_fu_301_p4}};

assign p_Val2_s_fu_247_p3 = ((icmp_ln209_fu_241_p2[0:0] == 1'b1) ? 32'd31 : p_out_i);

assign r_V_2_fu_301_p4 = {{p_Val2_s_fu_247_p3[31:1]}};

assign select_ln92_1_fu_144_p3 = ((icmp_ln93_fu_130_p2[0:0] == 1'b1) ? add_ln92_fu_124_p2 : ap_sig_allocacmp_i_load);

assign select_ln92_fu_136_p3 = ((icmp_ln93_fu_130_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign shl_ln4_fu_224_p3 = {{add_ln94_1_reg_376}, {2'd0}};

assign sub_ln94_fu_235_p2 = (zext_ln94_fu_231_p1 - zext_ln94_1_fu_221_p1);

assign sub_ln96_fu_201_p2 = (tmp_s_fu_194_p3 - zext_ln96_fu_191_p1);

assign tmp_1_fu_267_p3 = p_Val2_s_fu_247_p3[32'd30];

assign tmp_2_fu_287_p3 = p_Val2_s_fu_247_p3[32'd31];

assign tmp_fu_259_p3 = p_Val2_s_fu_247_p3[32'd10];

assign tmp_s_fu_194_p3 = {{select_ln92_1_reg_370}, {2'd0}};

assign trunc_ln728_fu_255_p1 = p_Val2_s_fu_247_p3[0:0];

assign trunc_ln9_fu_319_p4 = {{p_Val2_s_fu_247_p3[2:1]}};

assign xor_ln215_1_fu_281_p2 = (xor_ln215_fu_275_p2 ^ tmp_fu_259_p3);

assign xor_ln215_fu_275_p2 = (trunc_ln728_fu_255_p1 ^ tmp_1_fu_267_p3);

assign zext_ln92_fu_152_p1 = select_ln92_1_fu_144_p3;

assign zext_ln94_1_fu_221_p1 = add_ln94_1_reg_376;

assign zext_ln94_fu_231_p1 = shl_ln4_fu_224_p3;

assign zext_ln96_1_fu_207_p1 = select_ln92_reg_365;

assign zext_ln96_2_fu_216_p1 = add_ln96_fu_210_p2;

assign zext_ln96_fu_191_p1 = select_ln92_1_reg_370;

endmodule //tiled_conv_tiled_conv_Pipeline_VITIS_LOOP_92_2_VITIS_LOOP_93_3
